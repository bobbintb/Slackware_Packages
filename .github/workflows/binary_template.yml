name: Binary workflow template
on:
  workflow_call:
    inputs:
      NAME:
        description: 'Program name'
        required: true
        type: string
      REPO:
        description: 'Github repo name'
        required: true
        type: string
      OWNER:
        description: 'Github repo owner'
        required: true
        type: string
      BUILD:
        description: 'Program build number'
        required: false
        type: string
      BINARY:
        description: 'URL of the binary to package.'
        required: true
        type: string
      LICENSE:
        description: 'URL of the LICENSE to package.'
        required: false
        type: string
      README:
        description: 'URL of the README to package.'
        required: false
        type: string
      extra_prep:
        description: 'Extra prep'
        required: false
        type: string
        default: false
jobs:
  slackbuild_and_upload:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    # container:
    #   image: bobbintb/unraid-cicd-builder-upgraded
    #   options: --privileged
    steps:
    - 
      name: Checkout
      uses: actions/checkout@v4
      with:
        clean: true
    -
      name: Import GPG key
      uses: crazy-max/ghaction-import-gpg@v6
      with:
        gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.PASSPHRASE }}
    - 
      name: Get current version number
      run: |
        
        VERSION=$(curl -s https://api.github.com/repos/${{ inputs.OWNER }}/${{ inputs.REPO }}/releases/latest | jq -r .tag_name)
        echo "Current version of ${{ inputs.NAME }}: ${VERSION}"
        echo "VERSION=$VERSION" >> $GITHUB_ENV
    - 
      name: Check existing build and increment build number if needed
      run: |
        REPO=${GITHUB_REPOSITORY##*/}
        REPO_DIR="/__w/${REPO}/${REPO}"
        EXISTING_BUILD_DIR="${REPO_DIR}/builds/${{ inputs.NAME }}"
        
        echo "Checking for existing builds in: $EXISTING_BUILD_DIR"
        
        if [ -d "$EXISTING_BUILD_DIR" ]; then
          # Look for existing package files with the same version
          EXISTING_PACKAGE=$(find "$EXISTING_BUILD_DIR" -name "${{ inputs.NAME }}-${VERSION}-*-*_SBo.t*z" 2>/dev/null | head -n 1)
          
          if [ -n "$EXISTING_PACKAGE" ]; then
            echo "Found existing package: $(basename "$EXISTING_PACKAGE")"
            
            # Extract the current build number from the filename
            # Pattern: name-version-arch-build_SBo.tgz
            CURRENT_BUILD=$(basename "$EXISTING_PACKAGE" | sed -n "s/.*-${VERSION}-[^-]*-\([0-9]*\)_SBo\.t.*z/\1/p")
            
            if [ -n "$CURRENT_BUILD" ]; then
              # Increment the build number
              NEW_BUILD=$((CURRENT_BUILD + 1))
              echo "Current build number: $CURRENT_BUILD"
              echo "Incrementing to build number: $NEW_BUILD"
              
              # Export the new build number (override any existing BUILD input)
              echo "BUILD=$NEW_BUILD" >> $GITHUB_ENV
              export BUILD=$NEW_BUILD
            else
              echo "Could not extract build number from existing package"
              # Use provided BUILD input or default to 1
              if [ -n "${{ inputs.BUILD }}" ] && [ "${{ inputs.BUILD }}" != "null" ]; then
                echo "BUILD=${{ inputs.BUILD }}" >> $GITHUB_ENV
                export BUILD=${{ inputs.BUILD }}
              else
                echo "BUILD=1" >> $GITHUB_ENV
                export BUILD=1
              fi
            fi
          else
            echo "No existing package found for version $VERSION"
            # Use provided BUILD input or default to 1
            if [ -n "${{ inputs.BUILD }}" ] && [ "${{ inputs.BUILD }}" != "null" ]; then
              echo "BUILD=${{ inputs.BUILD }}" >> $GITHUB_ENV
              export BUILD=${{ inputs.BUILD }}
            else
              echo "BUILD=1" >> $GITHUB_ENV
              export BUILD=1
            fi
          fi
        else
          echo "No existing builds directory found"
          # Use provided BUILD input or default to 1
          if [ -n "${{ inputs.BUILD }}" ] && [ "${{ inputs.BUILD }}" != "null" ]; then
            echo "BUILD=${{ inputs.BUILD }}" >> $GITHUB_ENV
            export BUILD=${{ inputs.BUILD }}
          else
            echo "BUILD=1" >> $GITHUB_ENV
            export BUILD=1
          fi
        fi
        
        echo "Final BUILD number: $BUILD"
    - 
      name: Build
      run: |
        echo "Version"
        echo $VERSION
